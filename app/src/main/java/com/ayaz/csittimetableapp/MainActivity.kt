package com.ayaz.csittimetableappimport android.Manifestimport android.content.Contextimport android.content.Intentimport android.content.SharedPreferencesimport android.content.pm.PackageManagerimport android.net.Uriimport android.os.Buildimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.os.Environmentimport android.provider.ContactsContractimport android.provider.Settingsimport android.util.Logimport android.view.MenuItemimport android.view.Viewimport android.view.Windowimport android.widget.TextViewimport android.widget.Toastimport androidx.activity.result.contract.ActivityResultContractsimport androidx.appcompat.app.ActionBarDrawerToggleimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.drawerlayout.widget.DrawerLayoutimport androidx.fragment.app.Fragmentimport com.google.android.material.navigation.NavigationViewimport org.w3c.dom.Textimport java.io.Fileimport java.util.*class MainActivity : AppCompatActivity(),communication {    val fileurl = "https://drive.google.com/drive/folders/11gVZ2JMPXNWf4wr_2NXxzqOwObMMZBZU?usp=sharing"    private val filePath = File(Environment.getExternalStorageDirectory().toString() + "/Download/Timetable_v4.xlsx")    lateinit var toggle :ActionBarDrawerToggle    lateinit var drawerLayout : DrawerLayout    companion object {        private const val STORAGE_PERMISSION_CODE = 100        private const val TAG = "PERMISSION_TAG"    }    override fun onCreate(savedInstanceState: Bundle?) {        requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);        setProgressBarIndeterminateVisibility(true);        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        var updateflag = true        var status = loaddata()        drawerLayout = findViewById(R.id.perent_draw)        val nav_view: NavigationView = findViewById(R.id.nav_view)        if (!checkPermission()) {            requestPermission()        }        val inputStream = filePath        if (!inputStream.exists()) {            val fragmentmanger = supportFragmentManager            val fragemettransaction = fragmentmanger.beginTransaction()            fragemettransaction.replace(R.id.framelayout, DownloadFragment())            fragemettransaction.commit()            setTitle("Download This File")        }        else {            toggle = ActionBarDrawerToggle(this, drawerLayout, R.string.open, R.string.close)            drawerLayout.addDrawerListener(toggle)            toggle.syncState()            supportActionBar?.setDisplayHomeAsUpEnabled(true)            var day_name = 0            //Setting the header text of nav view            var headerview: View = nav_view.getHeaderView(0)            day_name = Calendar.getInstance(TimeZone.getTimeZone("UTC")).get(Calendar.DAY_OF_WEEK)            val day_name_view2 = headerview.findViewById<TextView>(R.id.nav_day_name)            val cl_name_view2 = headerview.findViewById<TextView>(R.id.nav_class_name)            cl_name_view2.text = loaddata()            when (day_name) {                1 -> {                    savedata_updation("need")                    day_name_view2.text = "Sunday"                }                2 -> {                    day_name_view2.text = "Monday"                    if (loaddata_updation() == "need") {                        updateflag = false                        savedata_updation("updated")                        Toast.makeText(                            this,                            "TimeTable file has been updated Please Download The new File to Continue",                            Toast.LENGTH_SHORT                        ).show()                        val fragmentmanger = supportFragmentManager                        val fragemettransaction = fragmentmanger.beginTransaction()                        fragemettransaction.replace(R.id.framelayout, DownloadFragment())                        fragemettransaction.commit()                        setTitle("Download This File")                    }                }                3 -> {                    savedata_updation("need")                    day_name_view2.text = "Tuesday "                }                4 -> {                    savedata_updation("need")                    day_name_view2.text = "Wednesday "                }                5 -> {                    savedata_updation("need")                    day_name_view2.text = "Thursday "                }                6 -> {                    savedata_updation("need")                    day_name_view2.text = "Friday"                }                7 -> {                    savedata_updation("need")                    day_name_view2.text = "Saturday"                }                else -> {                    Toast.makeText(this, "There is problem Baby $day_name", Toast.LENGTH_SHORT)                        .show()                }            }//header text seting ends here        if (updateflag != false ){            val fragmentmanger = supportFragmentManager            val fragemettransaction = fragmentmanger.beginTransaction()            fragemettransaction.replace(R.id.framelayout, HomeFragment())            fragemettransaction.commit()            setTitle("Home")            nav_view.setCheckedItem(R.id.nav_home) }            nav_view.setNavigationItemSelectedListener {                it.isChecked = true                when (it.itemId) {                    R.id.nav_home -> replaceFragment(HomeFragment(), it.title.toString())                    R.id.nav_room -> replaceFragment(avilable_room(), it.title.toString())                    R.id.nav_Gpa -> replaceFragment(GpaFragment(), it.title.toString())                    R.id.nav_Cgpa -> replaceFragment(CgpaFragment(), it.title.toString())                    R.id.nav_updatefile -> replaceFragment(DownloadFragment(), "Download File")                    R.id.nav_change_class -> replaceFragment(classnamepicker(), "Select Your Class")                    R.id.nav_email -> Emailus()                }                true            }        }    }    private fun Emailus()    {        val email = "ayazullah4239+app@gmail.com"        val intent = Intent(Intent.ACTION_SENDTO).apply {            data = Uri.parse("mailto")            putExtra(Intent.EXTRA_EMAIL,email)        }        if(intent.resolveActivity(packageManager) != null){            startActivity(intent)        }        else        {            Toast.makeText(this, "You dont have Any Client mail app Please Install Gmail or any other mail app to Send :)", Toast.LENGTH_SHORT).show()        }    }    private fun replaceFragment(fragment: Fragment,title: String) {        val fragmentmanger = supportFragmentManager        val fragemettransaction = fragmentmanger.beginTransaction()        fragemettransaction.replace(R.id.framelayout,fragment)        fragemettransaction.addToBackStack("tag")        fragemettransaction.commit()        setTitle(title)        drawerLayout.closeDrawers()        }    override fun passdata(textviewdata: String) {        var textview = findViewById<TextView>(R.id.nav_class_name)        if (textviewdata != null){        textview.text = textviewdata }        val bundle  = Bundle()        bundle.putString("key",textviewdata)        val homefrag = HomeFragment()        homefrag.arguments = bundle        replaceFragment(homefrag,"Home")    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        if (toggle.onOptionsItemSelected(item)){            return  true        }        return super.onOptionsItemSelected(item)    }    fun mainfiledownload() {        val inputStream = filePath        val openurl = Intent(android.content.Intent.ACTION_VIEW)        openurl.data = Uri.parse(fileurl)        startActivity(openurl)    }    private fun requestPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {            //Android is 11(R) or above            try {                Log.d(TAG, "requestPermission: try")                val intent = Intent()                intent.action = Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION                val uri = Uri.fromParts("package", this.packageName, null)                intent.data = uri                storageActivityResultLauncher.launch(intent)            } catch (e: Exception) {                Log.e(TAG, "requestPermission: ", e)                val intent = Intent()                intent.action = Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION                storageActivityResultLauncher.launch(intent)            }        } else {            //Android is below 11(R)            ActivityCompat.requestPermissions(                this,                arrayOf(                    Manifest.permission.WRITE_EXTERNAL_STORAGE,                    Manifest.permission.READ_EXTERNAL_STORAGE                ),                STORAGE_PERMISSION_CODE            )        }    }    private val storageActivityResultLauncher =        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {            Log.d(TAG, "storageActivityResultLauncher: ")            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {                if (Environment.isExternalStorageManager()) {                    Log.d(                        TAG,                        "storageActivityResultLauncher: Manage External Storage Permission is granted"                    )                    //FUNCTION NAME                } else {                    //Manage External Storage Permission is denied....                    Log.d(                        TAG,                        "storageActivityResultLauncher: Manage External Storage Permission is denied...."                    )//                    toast("Manage External Storage Permission is denied....")                }            } else {                //Android is below 11(R)            }        }    private fun checkPermission(): Boolean {        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {            //Android is 11(R) or above            Environment.isExternalStorageManager()        } else {            //Android is below 11(R)            val write = ContextCompat.checkSelfPermission(                this,                Manifest.permission.WRITE_EXTERNAL_STORAGE            )            val read = ContextCompat.checkSelfPermission(                this,                Manifest.permission.READ_EXTERNAL_STORAGE            )            write == PackageManager.PERMISSION_GRANTED && read == PackageManager.PERMISSION_GRANTED        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        if (requestCode == STORAGE_PERMISSION_CODE) {            if (grantResults.isNotEmpty()) {                val write = grantResults[0] == PackageManager.PERMISSION_GRANTED                val read = grantResults[1] == PackageManager.PERMISSION_GRANTED                if (write && read) {                    Log.d(                        TAG,                        "onRequestPermissionsResult: External Storage Permission granted"                    )                } else {                    Log.d(TAG,                        "onRequestPermissionsResult: External Storage Permission denied..."                    )                }            }        }    }    fun loaddata() : String?    {        val sheredperfernence : SharedPreferences? = this.getSharedPreferences("sheredPrefs",Context.MODE_PRIVATE)        val savestring = sheredperfernence?.getString("class_name","BSCS Unknown")        return savestring.toString()    }    fun loaddata_updation() : String?    {        val sheredperfernence : SharedPreferences? = this.getSharedPreferences("file",Context.MODE_PRIVATE)        val savestring = sheredperfernence?.getString("update","needed")        return savestring.toString()    }    fun savedata_updation(status : String ){        val sheredperfernence : SharedPreferences? = this.getSharedPreferences("file",Context.MODE_PRIVATE)        val editor = sheredperfernence?.edit()        editor?.apply {            putString("update",status)        }?.apply()    }}